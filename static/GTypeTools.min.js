
const GTypeTools=(()=>{;let simpleTypeArr=['string','bigint','boolean','symbol','undefined','function',]
;let complexTypeArr=['number','object']
;let numberTypeArr=['int','float','infinite','NaN']
;let objectTypeArr=['[object Null]','[object Object]','[object Array]','[object Date]','[object Function]',]
function JudeNumberAccurateType(params){;let resStr=''
if(is_int(params)){resStr='int'}
if(is_float(params)){resStr='float'}
if(is_Finite(params)){resStr='infinite'}
if(is_NaN(params)){resStr='NaN'}
return resStr}
function JudeObjectAccurateType(params){;let objTypeStr=Object.prototype.toString.call(params)
;let rtnType=objTypeStr===objectTypeArr[0]?'null':objTypeStr===objectTypeArr[1]?'object':objTypeStr===objectTypeArr[2]?'array':objTypeStr===objectTypeArr[3]?'date':objTypeStr===objectTypeArr[4]?'function':'object'
return rtnType}
function judeParamAccurateType(params){;let rtnType='';let typeStr=typeof params ;;let typeFlag=simpleTypeArr.includes(typeStr)
if(typeFlag){rtnType=typeStr}else{if(typeStr==='number'){;let numTypeStr=JudeNumberAccurateType(params);if(numberTypeArr.includes(numTypeStr)){rtnType=numTypeStr}}else if(typeStr==='object'){rtnType=JudeObjectAccurateType(params)}}
return rtnType}
function getArraySubscriptType(params){;let resArr=[]
if(arguments.length>0){;let flag1=is_array(params);let flag2=is_empty_array(params)
if(flag1&&!flag2){for(let i=0;i<params.length;i++){;let val=params[i];resArr.push(judeParamAccurateType(val))}}}
return resArr}
function getArraySubscriptTypeDetail(params,dataType){;let resArr=[]
if(arguments.length>0){;let flag1=is_array(params);;let flag2=is_empty_array(params);;let dType=is_string(dataType);let selectArr=[];let allArr=[]
if(flag1&&!flag2){for(let i=0;i<params.length;i++){;let index=i ;;let value=params[i];let type=judeParamAccurateType(value)
allArr.push({index,value,type})
if(dType&&dataType===type){selectArr.push({index,value,type}) ;continue}}
if(dType){resArr=[...selectArr]}else{resArr=[...allArr]}}}
return resArr}
function getArraySubscriptTypeIndexs(params,type){;let resArr=[]
if(arguments.length>1){;let temArr=getArraySubscriptTypeDetail(params,type);temArr.forEach((item)=>{resArr.push(item.index)})}
return resArr}
function getObjOfPropertyType(params){;let resArr=[]
if(arguments.length>0){;let flag1=is_object(params);let flag2=is_empty_object(params);if(flag1&&!flag2){for(const key in params){if(Object.hasOwnProperty.call(params,key)){;let val=params[key];resArr.push(judeParamAccurateType(val))}}}}
return resArr}
function getObjPropertyTypeDetail(params,dataType){;let resArr=[]
if(arguments.length>0){;let flag1=is_object(params);let flag2=is_empty_object(params);let dType=is_string(dataType);let selectArr=[];let allArr=[]
if(flag1&&!flag2){for(const key in params){if(Object.hasOwnProperty.call(params,key)){;let value=params[key];let type=judeParamAccurateType(value)
allArr.push({key,value,type})
if(dType&&dataType===type){selectArr.push({key,value,type});continue}}}
if(dType){resArr=[...selectArr]}else{resArr=[...allArr]}}}
return resArr}
function getObjPropertyTypeKeys(params,type){;let resArr=[]
if(arguments.length>1){;let temArr=getObjPropertyTypeDetail(params,type)
temArr.forEach((item)=>{resArr.push(item.key)})}
return resArr}
function is_empty_object(params){;let flag=false
if(arguments.length>0){flag=is_object(params);if(flag&&Object.keys(params).length===0){flag=true}else{flag=false}}
return flag}
function is_empty_array(params){;let flag=false
if(arguments.length>0){flag=is_array(params)
if(flag&&params.length===0){flag=true}else{flag=false}}
return flag}
function is_array(params){;let flag=false
if(arguments.length>0){;let pType=Object.prototype.toString.call(params);if(pType==='[object Array]'){flag=true}}
return flag}
function is_function(params){;let flag=false
if(arguments.length>0){;let pType=Object.prototype.toString.call(params);if(pType==='[object Function]'){flag=true}}
return flag}
function is_object(params){;let flag=false
if(arguments.length>0){;let pType=Object.prototype.toString.call(params);if(pType==='[object Object]'){flag=true}}
return flag}
function is_null(params){;let flag=false
if(arguments.length>0){;let pType=Object.prototype.toString.call(params);if(pType==='[object Null]'){flag=true}}
return flag}
function is_undefined(params){;let flag=typeof params==='undefined'
return flag}
function is_symbol(params){;let flag=typeof params==='symbol'
return flag}
function is_boolean(params){;let flag=typeof params==='boolean'
return flag}
function is_bigInt(params){;let flag=typeof params==='bigint'
return flag}
function is_float(params){;let flag=false
if(arguments.length>0){flag=is_number(params);if(flag){;let y=String(params).indexOf('.')+1
if(y>0){flag=true}else{flag=false}}}
return flag}
function is_int(params){;let flag=false
if(arguments.length>0){flag=is_number(params);if(flag&&Number.isInteger(params)){flag=true}else{flag=false}}
return flag}
function is_Finite(params){;let flag=false
if(arguments.length>0){flag=is_number(params);if(flag&&!Number.isFinite(params)){flag=true}else{flag=false}}
return flag}
function is_NaN(params){;let flag=false
if(arguments.length>0){flag=is_number(params);if(flag&&Number.isNaN(params)){flag=true}else{flag=false}}
return flag}
function is_number(params){;let flag=typeof params==='number'
return flag}
function is_string(params){;let flag=typeof params==='string'
return flag}
function matchType(fn,data){;let type=judeParamAccurateType(fn);if(type==='function'){return fn.apply(globalThis,[data])}else if(type==='string'){;let funArr=getObjPropertyTypeKeys(this,'function')
if(funArr.includes(fn)){return this[fn].apply(globalThis,[data])}else{throw Error('未找到该方法，请重试或者自定义函数')}}else{throw Error('请传入一个方法名称，或者使用自定义函数')}}
function transformTypeString(params){;let rtnStr=''
if(arguments.length>0){;let pType=judeParamAccurateType(params)
if(pType==='string'){return params}else if(pType==='array'){return params.map(String)}else if(pType==='object'){;let obj={}
for(const key in params){if(Object.hasOwnProperty.call(params,key)){obj[key]=String(params[key])}}
return obj}else{return String(params)}}
return rtnStr}
return{getType:judeParamAccurateType,getArrayTypes:getArraySubscriptType,getObjectTypes:getObjOfPropertyType,getArrayTypeIndexs:getArraySubscriptTypeIndexs,getObjectTypeKeys:getObjPropertyTypeKeys,getArrayTypesDetail:getArraySubscriptTypeDetail,getObjectTypesDetail:getObjPropertyTypeDetail,isString:is_string,isNumber:is_number,isNaN:is_NaN,isInfinite:is_Finite,isInt:is_int,isFloat:is_float,isBigInt:is_bigInt,isBoolean:is_boolean,isSymbol:is_symbol,isUndefined:is_undefined,isNull:is_null,isObject:is_object,isFunction:is_function,isArray:is_array,isEmptyArray:is_empty_array,isEmptyObject:is_empty_object,toString:transformTypeString,matchType,}})()